name: CI - Build
description: "Build"

inputs:
  working-directory:
    description: ""
    required: true
  AWS_ECR_ARN_ID:
    description: ""
    required: true
  AWS_STS_USER:
    description: ""
    required: true
  AWS_REGION:
    description: ""
    required: true
  IMAGE_NAME:
    description: ""
    required: true

  # DEV
  IS_DEV:
    description: ""
    required: true
  AWS_ARN_ID_DEV:
    description: ""
    required: true
  AZ_SUBSCRIPTION_ID_DEV:
    description: ""
    required: true

  # STG
  IS_STG:
    description: ''
    required: true
  AWS_ARN_ID_STG:
    description: ''
    required: true
  AZ_SUBSCRIPTION_ID_STG:
    description: ''
    required: true

  # PRD
  IS_PROD:
    description: ""
    required: true
  AWS_ARN_ID_PRD:
    description: ""
    required: true
  AZ_SUBSCRIPTION_ID_PRD:
    description: ""
    required: true

outputs:
  aws_assume_role:
    description: ""
    value: ${{ steps.setenv.outputs.aws_assume_role }}
  aws_arn_id:
    description: ""
    value: ${{ steps.setenv.outputs.aws_arn_id }}
  aws_region:
    description: ""
    value: ${{ steps.setenv.outputs.aws_region }}
  az_subscription_id:
    description: ""
    value: ${{ steps.setenv.outputs.az_subscription_id }}
  docker_tag:
    description: ""
    value: ${{ steps.docker_meta.outputs.tags }}
  environment:
    description: ""
    value: ${{ steps.setenv.outputs.environment }}
  environment_display:
    description: ""
    value: ${{ steps.setenv.outputs.environment_display }}
  envFile:
    description: ""
    value: ${{ steps.setenv.outputs.envFile }}

runs:
  using: "composite"
  steps:
    - uses: actions/github-script@v6
      name: Set environment
      id: setenv
      env:
        IS_DEV: ${{ inputs.IS_DEV }}
        IS_STG: ${{ inputs.IS_STG }}
        IS_PROD: ${{ inputs.IS_PROD }}
        AWS_ARN_ID_DEV: ${{ inputs.AWS_ARN_ID_DEV }}
        AWS_ARN_ID_STG: ${{ inputs.AWS_ARN_ID_STG }}
        AWS_ARN_ID_PRD: ${{ inputs.AWS_ARN_ID_PRD }}
        AWS_STS_USER: ${{ inputs.AWS_STS_USER }}
        AWS_REGION: ${{ inputs.AWS_REGION }}
        IMAGE_NAME: ${{ inputs.IMAGE_NAME }}
        AZ_SUBSCRIPTION_ID_DEV: ${{ inputs.AZ_SUBSCRIPTION_ID_DEV }}
        AZ_SUBSCRIPTION_ID_STG: ${{ inputs.AZ_SUBSCRIPTION_ID_STG }}
        AZ_SUBSCRIPTION_ID_PRD: ${{ inputs.AZ_SUBSCRIPTION_ID_PRD }}
      with:
        script: |
          const {
            IS_DEV,
            IS_STG,
            IS_PROD,
            AWS_ARN_ID_DEV,
            AWS_ARN_ID_STG,
            AWS_ARN_ID_PRD,
            AWS_STS_USER,
            AWS_REGION,
            IMAGE_NAME,
            AZ_SUBSCRIPTION_ID_DEV,
            AZ_SUBSCRIPTION_ID_STG,
            AZ_SUBSCRIPTION_ID_PRD,
          } = process.env;

          const jaimePrefix = "jaime_";

          const stringToBool = (s) => s.toLowerCase() === "true";

          if (stringToBool(IS_DEV)) {
            core.setOutput("environment", "development");
            core.setOutput("environment_display", "Dev");
            core.setOutput("aws_arn_id", AWS_ARN_ID_DEV);
            core.setOutput("aws_region", AWS_REGION);
            core.setOutput("aws_assume_role", `arn:aws:iam::${AWS_ARN_ID_DEV}:role/${AWS_STS_USER}`);
            core.setOutput("az_subscription_id", AZ_SUBSCRIPTION_ID_DEV);
            // Optionally add lambda function name output if IMAGE_NAME starts with prefix
            // if (IMAGE_NAME.startsWith(jaimePrefix)) {
            //   const slicedStr = IMAGE_NAME.slice(jaimePrefix.length);
            //   const lambdaFunctionName = `JAIME_Dev_NER_${slicedStr}`;
            //   core.setOutput("lambda_function_name", lambdaFunctionName);
            //   console.log(`lambdaFunctionName is ${lambdaFunctionName}`);
            // }
            console.log("set development environment");
          } else if (stringToBool(IS_STG)) {
            core.setOutput("environment", "stg");
            core.setOutput("environment_display", "STG");
            core.setOutput("aws_arn_id", AWS_ARN_ID_STG);
            core.setOutput("aws_region", AWS_REGION);
            core.setOutput("aws_assume_role", `arn:aws:iam::${AWS_ARN_ID_STG}:role/${AWS_STS_USER}`);
            core.setOutput("az_subscription_id", AZ_SUBSCRIPTION_ID_STG);
            // if (IMAGE_NAME.startsWith(jaimePrefix)) {
            //   const slicedStr = IMAGE_NAME.slice(jaimePrefix.length);
            //   const lambdaFunctionName = `JAIME_Stg_NER_${slicedStr}`;
            //   core.setOutput("lambda_function_name", lambdaFunctionName);
            //   console.log(`lambdaFunctionName is ${lambdaFunctionName}`);
            // }
            console.log("set staging environment");
          } else if (stringToBool(IS_PROD)) {
            core.setOutput("environment", "production");
            core.setOutput("environment_display", "Production");
            core.setOutput("aws_arn_id", AWS_ARN_ID_PRD);
            core.setOutput("aws_region", AWS_REGION);
            core.setOutput("aws_assume_role", `arn:aws:iam::${AWS_ARN_ID_PRD}:role/${AWS_STS_USER}`);
            core.setOutput("az_subscription_id", AZ_SUBSCRIPTION_ID_PRD);
            // if (IMAGE_NAME.startsWith(jaimePrefix)) {
            //   const slicedStr = IMAGE_NAME.slice(jaimePrefix.length);
            //   const lambdaFunctionName = `JAIME_Prod_NER_${slicedStr}`;
            //   core.setOutput("lambda_function_name", lambdaFunctionName);
            //   console.log(`lambdaFunctionName is ${lambdaFunctionName}`);
            // }
            console.log("set production environment");
          } else {
            console.error("Unexpected environment");
            process.exit(1);
          }

    - id: install-aws-cli
      uses: unfor19/install-aws-cli-action@v1
      with:
        version: 2
        arch: amd64

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Display Role
      shell: bash
      run: echo "${{ steps.setenv.outputs.aws_assume_role }}"

    - uses: aws-actions/configure-aws-credentials@v3
      with:
        role-to-assume: ${{ steps.setenv.outputs.aws_assume_role }}
        aws-region: ${{ steps.setenv.outputs.aws_region }}

    - run: aws sts get-caller-identity
      shell: bash

    - name: Docker meta
      id: docker_meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.AWS_ECR_ARN_ID }}.dkr.ecr.${{ inputs.AWS_REGION }}.amazonaws.com/${{ inputs.IMAGE_NAME }}
        flavor: |
          latest=false

    - name: ECR Login
      shell: bash
      run: aws ecr get-login-password --region ${{ steps.setenv.outputs.aws_region }} | docker login --username AWS --password-stdin ${{ inputs.AWS_ECR_ARN_ID }}.dkr.ecr.${{ steps.setenv.outputs.aws_region }}.amazonaws.com

    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        # context: ${{ inputs.working-directory }}
        context: .
        load: true
        push: false
        tags: ${{ steps.docker_meta.outputs.tags }}
        provenance: false
        cache-to: type=gha,mode=max
        cache-from: type=gha
        
    - id: inspector Scaning
      uses: aws-actions/vulnerability-scan-github-action-for-amazon-inspector@v1
      with:
          artifact_type: "container"
          artifact_path: ${{ steps.docker_meta.outputs.tags }}
          display_vulnerability_findings: "enabled"
          critical_threshold: 500
          high_threshold: 500
          medium_threshold: 500
          low_threshold: 500
          other_threshold: 500
          
    # - name: Upload Inspector Reports
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: amazon-inspector-results
    #     path: |
    #       ${{ steps.inspector.outputs.artifact_sbom }}
    #       ${{ steps.inspector.outputs.inspector_scan_results }}
    #       ${{ steps.inspector.outputs.inspector_scan_results_csv }}
    #       ${{ steps.inspector.outputs.inspector_scan_results_markdown }}

    # - name: On vulnerability threshold exceeded
    #   run: exit ${{ steps.inspector.outputs.vulnerability_threshold_exceeded }}

